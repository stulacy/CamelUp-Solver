% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{camelsolve}
\alias{camelsolve}
\title{Estimate camel win probabilities for Camel Up via simulation.}
\usage{
camelsolve(boardstate, unrolled_dice, num_sims = 1000L)
}
\arguments{
\item{boardstate}{A \code{16 x 7} integer matrix representing the current board state.
The rows correspond to the tiles, with the columns representing each of the 5 camels
and the two types of traps. Empty tiles are denoted by 0, while non-empty tiles have a positive
integer. Camel stacks are indicated by ascending numbers, with a value of 1 indicating a camel on
the bottom of the stack, 2 meaning the next highest camel and so on. Traps always have a value of 1.
The order of the 7 columns are as follows:
\enumerate{
    \item{Blue camel}
    \item{Green camel}
    \item{Orange camel}
    \item{Yellow camel}
    \item{White camel}
    \item{Forward trap}
    \item{Backward trap}
}}

\item{unrolled_dice}{An integer vector representing the dice that haven't been rolled yet this leg.
Integers map to camels in alphabetical order, i.e.:
\enumerate{
    \item{Blue camel}
    \item{Green camel}
    \item{Orange camel}
    \item{Yellow camel}
    \item{White camel}
}}

\item{num_sims}{The number of Monte Carlo simulations to run. Defaults to 1000.}
}
\value{
A \code{5 x 3} matrix of floats representing the probabilities of 3 outcomes 
for the 5 camels. The 3 columns represent the following outcomes in order:

\enumerate{
    \item{Leg winner}
    \item{Overall winner}
    \item{Overall loser }
}

The five rows represent the camels in the same alphabetical order as in the \code{boardstate} and
\code{unrolled_dice} parameters.
}
\description{
Estimates outcome probabilities for the boardgame Camel Up for a given board 
state using Monte Carlo Simulation.
}
\examples{
library(camelsolve)
2 camels on both tile 1 and 2 with last one on 3. One backwards trap on tile 4.
gamestate <- matrix(FALSE, nrow=16, ncol=7)
gamestate[1, 1] <- 1  # Blue camel on tile 1, bottom of stack
gamestate[2, 2] <- 1  # Green camel on tile 2, bottom of stack
gamestate[1, 3] <- 2  # Orange camel on tile 1, on top of blue camel
amestate[2, 4] <- 2   # Yellow camel on tile 2, on top of green camel
gamestate[3, 5] <- 1  # White camel on tile 3, alone

gamestate[4, 7] <- 1  # Backwards trap on tile 4

# Only the second dice has been rolled, i.e. the green dice
dice <- c(1, 3, 4, 5)

camelsolve(gamestate, dice)

}
